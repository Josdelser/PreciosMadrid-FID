install.packages("tidyverse")
install.packages("dplyr")
install.packages("rattle")
# libraries
library(rpart)
library(rpart.plot)
library(rattle)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(caret)
library(ggfortify)
library(readr)
library(factoextra)
require(corrplot)
set.seed(1)
install.packages("dplyr")
install.packages("rattle")
precios_madrid <- read.csv("PreciosMadrid.csv")
head(precios_madrid)
colnames(precios_madrid)
predata1 <- select(precios_madrid,price,floor_built,bathrooms,terrace,bedrooms,postalcode,garage_included)
head(predata1)
colnames(predata1)
predata2 = subset(predata1, price>0 & bedrooms>1 & postalcode>=28001 & postalcode<=28011)
predata2 <- na.omit(predata2)
predata <- unique(predata2)
predata$terrace <- as.numeric(as.logical(predata$terrace))
predata$garage_included <- as.numeric(as.logical(predata$garage_included))
predata$postalcode <- as.numeric(as.integer(predata$postalcode))
predata$price <- as.numeric(as.integer(predata$price))
predata$floor_built <- as.numeric(as.integer(predata$floor_built))
predata$bathrooms <- as.numeric(as.integer(predata$bathrooms))
predata$bedrooms <- as.numeric(as.integer(predata$bedrooms))
data<-predata
barplot(table(data$postalcode),
main="Número de casas por zona(Código Postal)",
xlab="Código Postal",
ylab="Número de casas",)
data_metros <- data
head(data_metros[order(data_metros$floor_built),])
rangos <- c(0,65,100,150,Inf)
values <- c ('Piso','Duplex','Casa','Chalet')
data_metros$tipo <- cut(data_metros$floor_built, breaks = rangos, labels = values)
barplot(table(data_metros$tipo),
main="Número de casas según el tipo",
xlab="Tipo",
ylab="Número de casas",
col=c("red","orange","green","blue"),)
data_metros$tipo <- as.numeric(as.factor(data_metros$tipo))
media1 <- aggregate(data_metros[, c(1,2,8)], list(data$postalcode), mean)
media1
data_metros$tipo <- as.numeric(as.factor(data_metros$tipo))
media1 <- aggregate(data_metros[, c(1,2,8)], list(data_metros$postalcode), mean)
media1
ggplot(media1, aes(x = floor_built, y = price)) +
geom_col()
#Pasamos a factor el codigo postal para ver mejor el codigo de colores
media1$Group.1 <- as.factor(as.numeric(media1$Group.1))
ggplot(media1, aes(x= floor_built, y=price, colour=Group.1)) + geom_point()
train <-createDataPartition(data$price, p = 0.7, list=FALSE)
data_train <- data[train,]
data_val <- data[-train,]
nrow(data_train)
nrow(data_val)
prp(arbol, type = 2, nn = TRUE,
fallen.leaves = FALSE,
varlen = 0,  shadow.col = "gray")
arbol <- rpart(formula =  price  ~ ., data = data_train)
fancyRpartPlot(arbol)
prp(arbol, type = 2, nn = TRUE,
fallen.leaves = FALSE,
varlen = 0,  shadow.col = "gray")
arbol$cptable
plotcp(arbol)
confusionMatrix(arbol, data_train[["price"]])
arbol_podado <- prune(arbol, cp = 0.052)
prp(arbol_podado, type = 2, nn = TRUE,
fallen.leaves = FALSE,
varlen = 0)
precio_pred <- predict(arbol, newdata = data_val)
precio_pred[1]
data_val[1,1]
price <- c(0,0,0,0,0)
floor_built<- c(134,134,234,123,100)
bathrooms<- c(1,3,1,2,3)
terrace<- c(0,0,1,0,0)
bedrooms<- c(2,2,4,2,2)
postalcode<- c(28002,28002,28003,28003,28008)
garage_included<- c(1,1,0,0,1)
data_test_nuevo <- data.frame(price,floor_built,bathrooms,terrace,bedrooms,postalcode,garage_included)
#Construimos unos de pruebas y ponemos a 0 la columna del precio.
#Predeccimos el precio segun el arbol
nuevo_precio_pred <- predict(arbol, newdata = data_test_nuevo)
nuevo_precio_pred
confusionMatrix(arbol, data_train[["price"]])
confusionMatrix(precio_pred, data_train[["price"]])
confusionMatrix(precio_pred, data_train["price"])
confusionMatrix(precio_pred, data_train["price"])
confusionMatrix(precio_pred, data_train["price"])
confusionMatrix(data = precio_pred, data_train["price"])
confusionMatrix(precio_pred, data)
confusionMatrix(nuevo_precio_pred, data)
price <- c(0,0,0,0,0)
floor_built<- c(134,134,234,123,100)
bathrooms<- c(1,3,1,2,3)
terrace<- c(0,0,1,0,0)
bedrooms<- c(2,2,4,2,2)
postalcode<- c(28002,28002,28003,28003,28008)
garage_included<- c(1,1,0,0,1)
data_test_nuevo <- data.frame(price,floor_built,bathrooms,terrace,bedrooms,postalcode,garage_included)
#Construimos unos de pruebas y ponemos a 0 la columna del precio.
#Predeccimos el precio segun el arbol
nuevo_precio_pred <- predict(arbol, newdata = data_test_nuevo, type="class")
price <- c(0,0,0,0,0)
floor_built<- c(134,134,234,123,100)
bathrooms<- c(1,3,1,2,3)
terrace<- c(0,0,1,0,0)
bedrooms<- c(2,2,4,2,2)
postalcode<- c(28002,28002,28003,28003,28008)
garage_included<- c(1,1,0,0,1)
data_test_nuevo <- data.frame(price,floor_built,bathrooms,terrace,bedrooms,postalcode,garage_included)
#Construimos unos de pruebas y ponemos a 0 la columna del precio.
#Predeccimos el precio segun el arbol
nuevo_precio_pred <- predict(arbol, newdata = data_test_nuevo)
nuevo_precio_pred
confusionMatrix(nuevo_precio_pred, data_test_nuevo)
install.packages('caret')
library(caret)
confusionMatrix(nuevo_precio_pred, data_test_nuevo)
install.packages("caret")
install.packages('caret')
library(caret)
confusionMatrix(nuevo_precio_pred, data_test_nuevo)
install.packages("caret")
library(caret)
confusionMatrix(nuevo_precio_pred, data_test_nuevo)
library(caret)
confusionMatrix(data =nuevo_precio_pred, reference = data_test_nuevo)
precio_pred <- predict(arbol, newdata = data_val)
precio_pred[1]
data_val[1,1]
library(caret)
confusionMatrix(data =nuevo_precio_pred, reference = precio_pred)
library(caret)
confusionMatrix(data =nuevo_precio_pred, reference = nuevo_precio_pred)
library(caret)
confusionMatrix(data =nuevo_precio_pred, reference = nuevo_precio_pred)
arbol$cptable
plotcp(arbol)
arbol_podado <- prune(arbol, cp = 0.052)
prp(arbol_podado, type = 2, nn = TRUE,
fallen.leaves = FALSE,
varlen = 0)
arbol_podado <- prune(arbol, cp = 0.052)
prp(arbol_podado, type = 2, nn = TRUE,
fallen.leaves = FALSE,
varlen = 0)
price <- c(0,0,0,0,0)
floor_built<- c(134,134,234,123,100)
bathrooms<- c(1,3,1,2,3)
terrace<- c(0,0,1,0,0)
bedrooms<- c(2,2,4,2,2)
postalcode<- c(28002,28002,28003,28003,28008)
garage_included<- c(1,1,0,0,1)
data_test_nuevo <- data.frame(price,floor_built,bathrooms,terrace,bedrooms,postalcode,garage_included)
#Construimos unos de pruebas y ponemos a 0 la columna del precio.
#Predeccimos el precio segun el arbol
nuevo_precio_pred <- predict(arbol, newdata = data_test_nuevo)
nuevo_precio_pred
price <- c(0,0,0,0,0)
floor_built<- c(134,134,234,123,100)
bathrooms<- c(1,3,1,2,3)
terrace<- c(0,0,1,0,0)
bedrooms<- c(2,2,4,2,2)
postalcode<- c(28002,28002,28003,28003,28008)
garage_included<- c(1,1,0,0,1)
data_test_nuevo <- data.frame(price,floor_built,bathrooms,terrace,bedrooms,postalcode,garage_included)
#Predeccimos el precio segun el arbol
nuevo_precio_pred <- predict(arbol, newdata = data_test_nuevo)
nuevo_precio_pred
regresion_mul <- lm(formula = price ~ ., data = data_train)
summary(regresion_mul)
step(regresion_mul, direction = "both", trace = 0)
corrplot(cor(data) ,type = "lower",)
plot(regresion_mul$fitted.values,  regresion_mul$residuals,
xlab = "Fitted values", ylab = "Residuals")
corrplot(cor(data_train) ,type = "lower",)
corrplot(cor(data_train) ,type = "lower",)
step(regresion_mul, direction = "both", trace = 0)
data_val_regresion <-predict(regresion_mul, data_val)
predict(regresion_mul,data_test_nuevo)
data_val_regresion[1]
data_val[1,1]
lapply(data,class)
summary(data)
data_scaled = scale(data)
summary(data_scaled)
v_compac <-0
for(i in 1:20){
km1<-kmeans(data,center=i,nstar=10)
v_compac[i] <- km1$tot.withinss
}
par(mfrow = c(1,1))
plot(1:20, v_compac, type = "b",
xlab = "Numero de clusters",
ylab = "Compactacion")
kmeans3 <- kmeans(data, center =3,nstart= 10)
kmeans3
fviz_cluster(object = kmeans3, data = data, show.clust.cent = TRUE,
ellipse.type = "euclid", star.plot = TRUE, repel = TRUE) +
labs(title = "Resultados clustering K-means") +
theme_bw() +
theme(legend.position = "none")
autoplot(kmeans3, data, frame=TRUE)
fviz_cluster(object = kmeans4, data = data, show.clust.cent = TRUE,
ellipse.type = "euclid", star.plot = TRUE, repel = TRUE) +
labs(title = "Resultados clustering K-means") +
theme_bw() +
theme(legend.position = "none")
kmeans4 <- kmeans(data, center =4,nstart= 10)
kmeans4
fviz_cluster(object = kmeans4, data = data, show.clust.cent = TRUE,
ellipse.type = "euclid", star.plot = TRUE, repel = TRUE) +
labs(title = "Resultados clustering K-means") +
theme_bw() +
theme(legend.position = "none")
autoplot(kmeans4, data, frame=TRUE)
