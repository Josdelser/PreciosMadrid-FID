data_train <- data_agrupada[train,]
data_val <- data_agrupada[validos,]
nrow(data_train)
nrow(data_val)
arbol <- rpart(formula =  categoria  ~ ., data = data_train, method = 'class')
fancyRpartPlot(arbol)
rpart.plot(arbol, extra = 5)
prp(arbol, type = 2, nn = TRUE,
fallen.leaves = FALSE,
varlen = 0,  shadow.col = "gray")
arbol$cptable
plotcp(arbol)
arbol_podado <- prune(arbol, cp = 0.017)
prp(arbol_podado, type = 2, nn = TRUE,
fallen.leaves = FALSE,
varlen = 0)
categoria_pred <- predict(arbol, newdata = data_val, type="class")
confunsion_m <- table(data_val$categoria, categoria_pred)
confunsion_m
acierto <- sum(diag(confunsion_m)) / sum(confunsion_m)
acierto
controlador <- rpart.control(minsplit = 10, minbucket = round(10 / 3), maxdepth = 4, cp = 0,015)
arbol2 <- rpart(categoria ~., data = data_train, method = 'class', control = control)
categoria_pred1 <- predict(arbol2, newdata = data_val, type="class")
confunsion_m1 <- table(data_val$categoria, categoria_pred1)
acierto2 <- sum(diag(confunsion_m1)) / sum(confunsion_m1)
acierto2
train_rg <-createDataPartition(data$price, p = 0.7, list=FALSE)
validos_rg <-createDataPartition(data$price, p = 0.7, list=FALSE)
data_train_rg <- data_agrupada[train_rg,]
data_val_rg <- data_agrupada[validos_rg,]
nrow(data_train_rg)
nrow(data_val_rg)
regresion_mul <- lm(formula = price ~ ., data = data_train_rg)
View(data)
train_rg <-createDataPartition(data$price, p = 0.7, list=FALSE)
data_train_rg <- data[train_rg,]
data_val_rg <- data[-train_rg,]
nrow(data_train_rg)
nrow(data_val_rg)
regresion_mul <- lm(formula = price ~ ., data = data_train_rg)
summary(regresion_mul)
step(regresion_mul, direction = "both", trace = 0)
corrplot(cor(data_train) ,type = "lower",)
corrplot(cor(data_train_rg) ,type = "lower",)
plot(regresion_mul$fitted.values,  regresion_mul$residuals,
xlab = "Fitted values", ylab = "Residuals")
qqnorm(regresion_mul$residuals, ylab = "Residual Quantiles")
qqline(regresion_mul$residuals, col = 2)
data_val_regresion <-predict(regresion_mul, data_val_rg)
confunsion_m1 <- table(data_val_rg$price, data_val_regresion)
acierto2 <- sum(diag(confunsion_m1)) / sum(confunsion_m1)
acierto2
data_val_regresion <-predict(regresion_mul, data_val_rg)
data_val_regresion
confunsion_m1 <- table(data_val_rg$price, data_val_regresion)
confunsion_m1
acierto2 <- sum(diag(confunsion_m1)) / sum(confunsion_m1)
acierto2
dif <- data_val_rg$price-data_val_regresion
dif <- data_val_rg$price-data_val_regresion
dif
dif <- data_val_rg$price-data_val_regresion
rmse <- sqrt(mean(dif ^ 2))
dif <- data_val_rg$price-data_val_regresion
rmse <- sqrt(mean(dif ^ 2))
rmse
dif <- data_val_rg$price-data_val_regresion
rmse <- sqrt(mean(dif ^ 2))
rmse
ss_res <- sum(dif^2)
ss_res <- sum(dif^2)
ss_tot <- sum((data_val_rg$price - mean(data_val_rg$price)) ^ 2)
r_sq <- 1 - (ss_res / ss_tot)
print(r_sq)
summary(lm_kang)$r.squared
summary(regresion_mul)$r.squared
summary(regresion_mul)
residual <- sum(dif^2)
total <- sum((data_val_rg$price - mean(data_val_rg$price)) ^ 2)
acierto_rg <- 1 - (residual / total)
acierto_rg
dif <- data_val_rg$price-data_val_regresion
rmse <- sqrt(mean(dif ^ 2))
rmse
dif <- data_val_rg$price-data_val_regresion
rmse <- sqrt(mean(dif ^ 2))
rmse
residual <- sum(dif^2)
total <- sum((data_val_rg$price - mean(data_val_rg$price)) ^ 2)
acierto_rg <- 1 - (residual / total)
acierto_rg
lapply(data,class)
summary(data)
data_scaled = scale(data)
summary(data_scaled)
v_compac <-0
for(i in 1:20){
km1<-kmeans(data,center=i,nstar=10)
v_compac[i] <- km1$tot.withinss
}
par(mfrow = c(1,1))
plot(1:20, v_compac, type = "b",
xlab = "Numero de clusters",
ylab = "Compactacion")
#install.packages("tidyverse")
#install.packages("dplyr")
#install.packages("rattle")
# libraries
library(rpart)
library(rpart.plot)
library(rattle)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(caret)
library(ggfortify)
library(readr)
library(factoextra)
require(corrplot)
set.seed(1)
precios_madrid <- read.csv("PreciosMadrid.csv")
head(precios_madrid)
colnames(precios_madrid)
predata1 <- select(precios_madrid,price,floor_built,bathrooms,terrace,bedrooms,postalcode,garage_included)
head(predata1)
colnames(predata1)
predata2 = subset(predata1, price>0 & bedrooms>1 & postalcode>=28001 & postalcode<=28011)
predata2 <- na.omit(predata2)
predata <- unique(predata2)
predata$terrace <- as.numeric(as.logical(predata$terrace))
predata$garage_included <- as.numeric(as.logical(predata$garage_included))
predata$postalcode <- as.numeric(as.integer(predata$postalcode))
predata$price <- as.numeric(as.integer(predata$price))
predata$floor_built <- as.numeric(as.integer(predata$floor_built))
predata$bathrooms <- as.numeric(as.integer(predata$bathrooms))
predata$bedrooms <- as.numeric(as.integer(predata$bedrooms))
data<-predata
barplot(table(data$terrace),
main="Número de casas con terraza",
xlab="Tiene o no terraza",
ylab="Número de casas",)
barplot(table(data$bathrooms),
main="Cantidad de baños por casa",
xlab="Cantidad de baños",
ylab="Número de casas",)
barplot(table(data$bedrooms),
main="Cantidad de habitaciones por casa",
xlab="Número de habitaciones",
ylab="Número de casas",)
barplot(table(data$postalcode),
main="Número de casas por zona(Código Postal)",
xlab="Código Postal",
ylab="Número de casas",)
data_metros <- data
head(data_metros[order(data_metros$floor_built),])
rangos <- c(0,65,100,150,Inf)
values <- c ('Piso','Duplex','Casa','Chalet')
data_metros$tipo <- cut(data_metros$floor_built, breaks = rangos, labels = values)
barplot(table(data_metros$tipo),
main="Número de casas según el tipo",
xlab="Tipo",
ylab="Número de casas",
col=c("red","orange","green","blue"),)
data_metros$tipo <- as.numeric(as.factor(data_metros$tipo))
media1 <- aggregate(data_metros[, c(1,2,8)], list(data_metros$postalcode), mean)
media1
ggplot(media1, aes(x = floor_built, y = price)) +
geom_col()
#Pasamos a factor el codigo postal para ver mejor el codigo de colores
media1$Group.1 <- as.factor(as.numeric(media1$Group.1))
ggplot(media1, aes(x= floor_built, y=price, colour=Group.1)) + geom_point()
plot(x = data$price, y = data$floor_built)
plot(x = data$price, y = data$bathrooms)
plot(x = data$price, y = data$postalcode)
plot(x = data$price, y = data$bedrooms)
a<- ggplot(data_metros, aes(garage_included))
a + geom_bar(aes(fill = tipo))
a<- ggplot(data_metros, aes(postalcode))
a + geom_bar(aes(fill = tipo))
data_analisis<-data
nrow(data_analisis)
rangos <- c(0,1300,2500,Inf)
values <- c ('barata','normal','cara')
data_analisis$categoria <- cut(data_analisis$price, breaks = rangos, labels = values)
data_analisis <- data_analisis %>%
select(-c(price))
data_agrupada <- data_analisis %>%
group_by( floor_built, bathrooms, bedrooms, garage_included, terrace,postalcode,categoria) %>%
count() %>%
arrange(desc(n()))
data_agrupada <- data_agrupada  %>%
rename(TotalCasas = n)
head(data_agrupada)
train <-createDataPartition(data_agrupada$categoria, p = 0.7, list=FALSE)
validos <-createDataPartition(data_agrupada$categoria, p = 0.7, list=FALSE)
data_train <- data_agrupada[train,]
data_val <- data_agrupada[validos,]
nrow(data_train)
nrow(data_val)
arbol <- rpart(formula =  categoria  ~ ., data = data_train, method = 'class')
fancyRpartPlot(arbol)
rpart.plot(arbol, extra = 5)
prp(arbol, type = 2, nn = TRUE,
fallen.leaves = FALSE,
varlen = 0,  shadow.col = "gray")
arbol$cptable
plotcp(arbol)
arbol_podado <- prune(arbol, cp = 0.017)
prp(arbol_podado, type = 2, nn = TRUE,
fallen.leaves = FALSE,
varlen = 0)
categoria_pred <- predict(arbol, newdata = data_val, type="class")
confunsion_m <- table(data_val$categoria, categoria_pred)
confunsion_m
acierto <- sum(diag(confunsion_m)) / sum(confunsion_m)
acierto
controlador <- rpart.control(minsplit = 10, minbucket = round(10 / 3), maxdepth = 4, cp = 0,015)
arbol2 <- rpart(categoria ~., data = data_train, method = 'class', control = control)
categoria_pred1 <- predict(arbol2, newdata = data_val, type="class")
confunsion_m1 <- table(data_val$categoria, categoria_pred1)
acierto2 <- sum(diag(confunsion_m1)) / sum(confunsion_m1)
acierto2
train_rg <-createDataPartition(data$price, p = 0.7, list=FALSE)
data_train_rg <- data[train_rg,]
data_val_rg <- data[-train_rg,]
nrow(data_train_rg)
nrow(data_val_rg)
regresion_mul <- lm(formula = price ~ ., data = data_train_rg)
summary(regresion_mul)
step(regresion_mul, direction = "both", trace = 0)
corrplot(cor(data_train_rg) ,type = "lower",)
plot(regresion_mul$fitted.values,  regresion_mul$residuals,
xlab = "Fitted values", ylab = "Residuals")
qqnorm(regresion_mul$residuals, ylab = "Residual Quantiles")
qqline(regresion_mul$residuals, col = 2)
data_val_regresion <-predict(regresion_mul, data_val_rg)
data_val_regresion
dif <- data_val_rg$price-data_val_regresion
rmse <- sqrt(mean(dif ^ 2))
rmse
residual <- sum(dif^2)
total <- sum((data_val_rg$price - mean(data_val_rg$price)) ^ 2)
acierto_rg <- 1 - (residual / total)
acierto_rg
lapply(data,class)
summary(data)
data_scaled = scale(data)
summary(data_scaled)
v_compac <-0
for(i in 1:20){
km1<-kmeans(data,center=i,nstar=10)
v_compac[i] <- km1$tot.withinss
}
par(mfrow = c(1,1))
plot(1:20, v_compac, type = "b",
xlab = "Numero de clusters",
ylab = "Compactacion")
kmeans3 <- kmeans(data, center =3,nstart= 10)
kmeans3
fviz_cluster(object = kmeans3, data = data, show.clust.cent = TRUE,
ellipse.type = "euclid", star.plot = TRUE, repel = TRUE) +
labs(title = "Resultados clustering K-means") +
theme_bw() +
theme(legend.position = "none")
autoplot(kmeans3, data, frame=TRUE)
kmeans4 <- kmeans(data, center =4,nstart= 10)
kmeans4
fviz_cluster(object = kmeans4, data = data, show.clust.cent = TRUE,
ellipse.type = "euclid", star.plot = TRUE, repel = TRUE) +
labs(title = "Resultados clustering K-means") +
theme_bw() +
theme(legend.position = "none")
hier_clust_1 = hclust(dist(scaled), method= 'complete')
hier_clust_1 = hclust(dist(data_scaled), method= 'complete')
hier_clust_1 = hclust(dist(data_scaled), method= 'complete')
hier_clust_1
hier_clust_1 = hclust(dist(data_scaled), method= 'complete')
hier_clust_1
plot(hier_clust_1)
hc_1_assign <- cutree(hier_clust_1, 3)
hc_1_assign <- cutree(hier_clust_1, 3)
plo(hc_1_assign)
hc_1_assign <- cutree(hier_clust_1, 3)
plot(hc_1_assign)
hc_1_assign <- cutree(hier_clust_1, 3)
hc_1_assign
plot(hc_1_assign)
matriz_distancias <-dist(data)
hier_clust_1 = hclust(matriz_distancias)
hier_clust_1
plot(hier_clust_1)
matriz_distancias <-dist(data)
hier_clust_1 = hclust(matriz_distancias)
hier_clust_1
matriz_distancias <-dist(data)
hier_clust_1 = hclust(matriz_distancias)
summary(hier_clust_1)
matriz_distancias <-dist(data)
hier_clust_1 = hclust(matriz_distancias)
summary(hier_clust_1)
matriz_distancias <-dist(data)
den1 = hclust(matriz_distancias)
summary(den1)
plot(den1)
plot(den1,hang = -2)
plot(den1,hang = 2)
plot(den1,hang = -22)
plot(den1,hang = -20)
plot(den1,hang = -15)
plot(den1,hang = -10)
cutree(den1,k=3)
plot(den1,hang = -10)
cutree(den1,k=4)
cortado_den1<-cutree(den1,k=4)
hclust.average <- hclust(dist(data), method = "average")
plot(hclust.average, main = "Distancia media: average", h=-2)
matriz_distancias <-dist(data)
den1 = hclust(matriz_distancias, method = "complete")
summary(den1)
plot(den1,hang = -10)
matriz_distancias <-dist(data)
den1 = hclust(matriz_distancias, method = "average")
summary(den1)
plot(den1,hang = -10)
matriz_distancias <-dist(data)
den1 = hclust(matriz_distancias, method = "single")
summary(den1)
plot(den1,hang = -10)
matriz_distancias <-dist(data)
den1 = hclust(matriz_distancias, method = "complete")
summary(den1)
plot(den1,hang = -10)
cortado_den1<-cutree(den1,k=4)
hclust_aux
table(kmeans4$cluster,cortado_den1)
table(kmeans4$cluster,cortado_den1)
cortado_den1<-cutree(den1,k=4)
#install.packages("tidyverse")
#install.packages("dplyr")
#install.packages("rattle")
# libraries
library(rpart)
library(rpart.plot)
library(rattle)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(caret)
library(ggfortify)
library(readr)
library(factoextra)
require(corrplot)
set.seed(1)
precios_madrid <- read.csv("PreciosMadrid.csv")
head(precios_madrid)
colnames(precios_madrid)
predata1 <- select(precios_madrid,price,floor_built,bathrooms,terrace,bedrooms,postalcode,garage_included)
head(predata1)
colnames(predata1)
predata2 = subset(predata1, price>0 & bedrooms>1 & postalcode>=28001 & postalcode<=28011)
predata2 <- na.omit(predata2)
predata <- unique(predata2)
predata$terrace <- as.numeric(as.logical(predata$terrace))
predata$garage_included <- as.numeric(as.logical(predata$garage_included))
predata$postalcode <- as.numeric(as.integer(predata$postalcode))
predata$price <- as.numeric(as.integer(predata$price))
predata$floor_built <- as.numeric(as.integer(predata$floor_built))
predata$bathrooms <- as.numeric(as.integer(predata$bathrooms))
predata$bedrooms <- as.numeric(as.integer(predata$bedrooms))
data<-predata
barplot(table(data$terrace),
main="Número de casas con terraza",
xlab="Tiene o no terraza",
ylab="Número de casas",)
barplot(table(data$bathrooms),
main="Cantidad de baños por casa",
xlab="Cantidad de baños",
ylab="Número de casas",)
barplot(table(data$bedrooms),
main="Cantidad de habitaciones por casa",
xlab="Número de habitaciones",
ylab="Número de casas",)
barplot(table(data$postalcode),
main="Número de casas por zona(Código Postal)",
xlab="Código Postal",
ylab="Número de casas",)
data_metros <- data
head(data_metros[order(data_metros$floor_built),])
rangos <- c(0,65,100,150,Inf)
values <- c ('Piso','Duplex','Casa','Chalet')
data_metros$tipo <- cut(data_metros$floor_built, breaks = rangos, labels = values)
barplot(table(data_metros$tipo),
main="Número de casas según el tipo",
xlab="Tipo",
ylab="Número de casas",
col=c("red","orange","green","blue"),)
data_metros$tipo <- as.numeric(as.factor(data_metros$tipo))
media1 <- aggregate(data_metros[, c(1,2,8)], list(data_metros$postalcode), mean)
media1
ggplot(media1, aes(x = floor_built, y = price)) +
geom_col()
#Pasamos a factor el codigo postal para ver mejor el codigo de colores
media1$Group.1 <- as.factor(as.numeric(media1$Group.1))
ggplot(media1, aes(x= floor_built, y=price, colour=Group.1)) + geom_point()
plot(x = data$price, y = data$floor_built)
plot(x = data$price, y = data$bathrooms)
plot(x = data$price, y = data$postalcode)
plot(x = data$price, y = data$bedrooms)
a<- ggplot(data_metros, aes(garage_included))
a + geom_bar(aes(fill = tipo))
a<- ggplot(data_metros, aes(postalcode))
a + geom_bar(aes(fill = tipo))
data_analisis<-data
nrow(data_analisis)
rangos <- c(0,1300,2500,Inf)
values <- c ('barata','normal','cara')
data_analisis$categoria <- cut(data_analisis$price, breaks = rangos, labels = values)
data_analisis <- data_analisis %>%
select(-c(price))
data_agrupada <- data_analisis %>%
group_by( floor_built, bathrooms, bedrooms, garage_included, terrace,postalcode,categoria) %>%
count() %>%
arrange(desc(n()))
data_agrupada <- data_agrupada  %>%
rename(TotalCasas = n)
head(data_agrupada)
train <-createDataPartition(data_agrupada$categoria, p = 0.7, list=FALSE)
validos <-createDataPartition(data_agrupada$categoria, p = 0.7, list=FALSE)
data_train <- data_agrupada[train,]
data_val <- data_agrupada[validos,]
nrow(data_train)
nrow(data_val)
arbol <- rpart(formula =  categoria  ~ ., data = data_train, method = 'class')
fancyRpartPlot(arbol)
rpart.plot(arbol, extra = 5)
prp(arbol, type = 2, nn = TRUE,
fallen.leaves = FALSE,
varlen = 0,  shadow.col = "gray")
arbol$cptable
plotcp(arbol)
arbol_podado <- prune(arbol, cp = 0.017)
prp(arbol_podado, type = 2, nn = TRUE,
fallen.leaves = FALSE,
varlen = 0)
categoria_pred <- predict(arbol, newdata = data_val, type="class")
confunsion_m <- table(data_val$categoria, categoria_pred)
confunsion_m
acierto <- sum(diag(confunsion_m)) / sum(confunsion_m)
acierto
controlador <- rpart.control(minsplit = 10, minbucket = round(10 / 3), maxdepth = 4, cp = 0,015)
arbol2 <- rpart(categoria ~., data = data_train, method = 'class', control = control)
categoria_pred1 <- predict(arbol2, newdata = data_val, type="class")
confunsion_m1 <- table(data_val$categoria, categoria_pred1)
acierto2 <- sum(diag(confunsion_m1)) / sum(confunsion_m1)
acierto2
train_rg <-createDataPartition(data$price, p = 0.7, list=FALSE)
data_train_rg <- data[train_rg,]
data_val_rg <- data[-train_rg,]
nrow(data_train_rg)
nrow(data_val_rg)
regresion_mul <- lm(formula = price ~ ., data = data_train_rg)
summary(regresion_mul)
step(regresion_mul, direction = "both", trace = 0)
corrplot(cor(data_train_rg) ,type = "lower",)
plot(regresion_mul$fitted.values,  regresion_mul$residuals,
xlab = "Fitted values", ylab = "Residuals")
qqnorm(regresion_mul$residuals, ylab = "Residual Quantiles")
qqline(regresion_mul$residuals, col = 2)
data_val_regresion <-predict(regresion_mul, data_val_rg)
data_val_regresion
dif <- data_val_rg$price-data_val_regresion
rmse <- sqrt(mean(dif ^ 2))
rmse
residual <- sum(dif^2)
total <- sum((data_val_rg$price - mean(data_val_rg$price)) ^ 2)
acierto_rg <- 1 - (residual / total)
acierto_rg
lapply(data,class)
summary(data)
data_scaled = scale(data)
summary(data_scaled)
v_compac <-0
for(i in 1:20){
km1<-kmeans(data,center=i,nstar=10)
v_compac[i] <- km1$tot.withinss
}
par(mfrow = c(1,1))
plot(1:20, v_compac, type = "b",
xlab = "Numero de clusters",
ylab = "Compactacion")
kmeans3 <- kmeans(data, center =3,nstart= 10)
kmeans3
fviz_cluster(object = kmeans3, data = data, show.clust.cent = TRUE,
ellipse.type = "euclid", star.plot = TRUE, repel = TRUE) +
labs(title = "Resultados clustering K-means") +
theme_bw() +
theme(legend.position = "none")
autoplot(kmeans3, data, frame=TRUE)
kmeans4 <- kmeans(data, center =4,nstart= 10)
kmeans4
fviz_cluster(object = kmeans4, data = data, show.clust.cent = TRUE,
ellipse.type = "euclid", star.plot = TRUE, repel = TRUE) +
labs(title = "Resultados clustering K-means") +
theme_bw() +
theme(legend.position = "none")
autoplot(kmeans4, data, frame=TRUE)
matriz_distancias <-dist(data)
den1 = hclust(matriz_distancias, method = "complete")
summary(den1)
plot(den1,hang = -10)
cortado_den1<-cutree(den1,k=4)
